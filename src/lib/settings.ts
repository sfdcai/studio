'use server';

import fs from 'fs/promises';
import path from 'path';

export type Settings = {
  appName: string;
  isDarkMode: boolean;
  // Backend paths
  stagingDir: string;
  archiveDir: string;
  processedDir: string;
  logDir: string;
  dbPath: string;
  // Rclone
  rcloneRemote: string;
  drivePath: string; // This is the destination path on the remote
  // iCloud
  icloudUser: string; // This is the Apple ID
  // Processing
  processLimit: number;
  jpgQualityMedium: number;
  jpgQualityLow: number;
  vidCRF1080p: number;
  vidCRF720p: number;
  vidCRF640p: number;
};

const settingsFilePath = path.join(process.cwd(), 'settings.json');
const configFilePath = path.join(process.cwd(), 'config.conf');

const defaultSettings: Settings = {
  appName: "MediaFlow",
  isDarkMode: false,
  stagingDir: "/data/nas/staging",
  archiveDir: "/data/nas/archive",
  processedDir: "/data/nas/processed",
  logDir: "/data/nas/logs",
  dbPath: "media_library.sqlite",
  rcloneRemote: "gdrive",
  drivePath: "My Media/Optimized",
  icloudUser: "your_apple_id@email.com",
  processLimit: 1000,
  jpgQualityMedium: 85,
  jpgQualityLow: 75,
  vidCRF1080p: 24,
  vidCRF720p: 26,
  vidCRF640p: 28,
};

async function ensureSettingsFileExists() {
  try {
    await fs.access(settingsFilePath);
  } catch {
    await fs.writeFile(settingsFilePath, JSON.stringify(defaultSettings, null, 2), 'utf-8');
  }
}

export async function getSettings(): Promise<Settings> {
  await ensureSettingsFileExists();
  try {
    const fileContent = await fs.readFile(settingsFilePath, 'utf-8');
    const loadedSettings = JSON.parse(fileContent);
    // Merge with defaults to ensure all keys are present
    return { ...defaultSettings, ...loadedSettings };
  } catch (error) {
    console.error("Error reading settings file, returning defaults:", error);
    return defaultSettings;
  }
}

export async function saveSettings(settings: Settings): Promise<void> {
  await ensureSettingsFileExists();
  const settingsJson = JSON.stringify(settings, null, 2);
  await fs.writeFile(settingsFilePath, settingsJson, 'utf-8');
}

export async function generateAndSaveConfig(settings: Settings): Promise<void> {
    const configContent = `
# =================================================
#  Configuration for Media Processing Script
#  AUTO-GENERATED BY MediaFlow UI. DO NOT EDIT.
# =================================================

# --- Apple iCloud Credentials ---
APPLE_ID="${settings.icloudUser}"

# --- Directory Paths ---
STAGING_DIR="${settings.stagingDir}"
ARCHIVE_DIR="${settings.archiveDir}"
PROCESSED_DIR="${settings.processedDir}"
LOG_DIR="${settings.logDir}"
DB_PATH="${settings.dbPath}"

# --- Rclone Configuration ---
RCLONE_REMOTE="${settings.rcloneRemote}"
RCLONE_DEST_PATH="${settings.drivePath}"

# --- Processing Limits ---
PROCESS_LIMIT="${settings.processLimit}"

# --- Image Compression Quality (JPEG) ---
JPG_QUAL_MED="${settings.jpgQualityMedium}"
JPG_QUAL_LOW="${settings.jpgQualityLow}"

# --- Video Compression Quality (CRF for H.265) ---
VID_CRF_1080p="${settings.vidCRF1080p}"
VID_CRF_720p="${settings.vidCRF720p}"
VID_CRF_640p="${settings.vidCRF640p}"
`.trim();

    try {
        await fs.writeFile(configFilePath, configContent, 'utf-8');
    } catch (error) {
        console.error("Failed to generate and save config.conf:", error);
        throw new Error("Could not write backend configuration file. Check file permissions.");
    }
}
